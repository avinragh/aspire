swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger Petstore"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v1"
tags:
- name: "loan"
  description: "Everything about your Pets"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "installment"
  description: "Access to Petstore orders"
schemes:
- "https"
- "http"
paths:
  /v1/Signup:
    post:
      tags:
      - "signup"
      summary: "Signup a user"
      description: "Signup a user with the credentials"
      operationId: "signup"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: user
        in: body
        description: The user to create
        schema:
          $ref: '#/definitions/User'
      responses:
        200:
          description: OK
        400:
          description: Bad Request. Both email and password must be present and must be strings
        409:
          description: Conflict. User with given email already exists
        500:
          description: Internal Server Error 
        
        
  /loan:
    post:
      tags:
      - "loan"
      summary: "Add a new loan"
      description: ""
      operationId: "addLoan"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Loan Object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Loan"
      responses:
        "405":
          description: "Invalid input"
definitions:
  Loan:
    type: object
    required:
      - id
      - amount
      - term
    properties:
      id:
        type: integer
        format: int64
      amount: 
        type: number
        format: double
      term:
        type: integer
        format: int
      currency:
        type: string
      state:
        type: string
      createdOn:
        type: string
        format: date-time
        x-go-custom-tag: json:"created_on"
      modifiedOn:
        type: string
        format: date-time
        x-go-custom-tag: json:"modified_on"
      startDate:
        type: string
        format: date-time
        x-go-custom-tag: json:"start_date"
      userId:
        type: integer
        format: int64
        x-go-custom-tag: json:"user_id"


  Installment:
    type: object
    required:
      - id
      - installmentAmount
      - dueDate
    properties:
      id:
        type: integer
        format: int64
      installmentAmount:
        type: number
        format: double
      repaymentAmount:
        type: number
        format: double
      dueDate:
        type: string
        format: date-time
      state:
        type: string
      createdOn:
        type: string
        format: date-time
        x-go-custom-tag: sql:"created_on"
      modifiedOn:
        type: string
        format: date-time
        x-go-custom-tag: sql:"modified_on"
      loanId:
        type: integer
        format: int64
      repaymentTime:
        type: string
        format: date-time
        x-go-custom-tag: sql:repayment_time"


  User:
    type: object
    required:
      - id
      - username
      - email
      - password
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      email:
        type: string
      role:
        type: string
      createdOn:
        type: string
        format: date-time
        x-go-custom-tag: sql:"created_on"
      modifiedOn:
        type: string
        format: date-time
        x-go-custom-tag: sql:"modified_on"
      password:
        type: string
  
  Authentication:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
      password:
        type: string

  Token:
    type: object
    required: 
      - email
      - tokenString
    properties:
      email: 
        type: string
      role:
        type: string
      tokenString:
        type: string

  FindLoansParams:
    type: object
    properties:
      userId:
        type: string
      state:
        type: string
      sort:
        type: string
      limit:
        type: string
      page:
        type: string

  FindInstallmentsParams:
    type: object
    properties:
      loanId:
        type: string
      state:
        type: string
      sort:
        type: string
      limit:
        type: string
      page: 
        type: string

  RepaymentRequest:
    type: object
    required:
      - repaymentAmount
    properties:
      repaymentAmount:
        type: number
        format: double

  ErrorResponse:
    type: object
    properties:
      code:
        type: string
      message:
        type: string
      detail:
        type: string



  




