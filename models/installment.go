// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Installment installment
//
// swagger:model Installment
type Installment struct {

	// created on
	// Format: date-time
	CreatedOn strfmt.DateTime `json:"createdOn" sql:"created_on"`

	// due date
	// Required: true
	// Format: date-time
	DueDate *strfmt.DateTime `json:"dueDate"`

	// id
	ID int64 `json:"id"`

	// installment amount
	// Required: true
	// Minimum: 1
	InstallmentAmount *float64 `json:"installmentAmount"`

	// loan Id
	LoanID int64 `json:"loanId"`

	// modified on
	// Format: date-time
	ModifiedOn strfmt.DateTime `json:"modifiedOn" sql:"modified_on"`

	// repayment amount
	// Minimum: 0
	RepaymentAmount *float64 `json:"repaymentAmount"`

	// repayment time
	// Format: date-time
	RepaymentTime strfmt.DateTime `json:"repaymentTime" sql:repayment_time"`

	// state
	State string `json:"state"`
}

// Validate validates this installment
func (m *Installment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDueDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstallmentAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepaymentAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepaymentTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Installment) validateCreatedOn(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("createdOn", "body", "date-time", m.CreatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Installment) validateDueDate(formats strfmt.Registry) error {

	if err := validate.Required("dueDate", "body", m.DueDate); err != nil {
		return err
	}

	if err := validate.FormatOf("dueDate", "body", "date-time", m.DueDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Installment) validateInstallmentAmount(formats strfmt.Registry) error {

	if err := validate.Required("installmentAmount", "body", m.InstallmentAmount); err != nil {
		return err
	}

	if err := validate.Minimum("installmentAmount", "body", *m.InstallmentAmount, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *Installment) validateModifiedOn(formats strfmt.Registry) error {
	if swag.IsZero(m.ModifiedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("modifiedOn", "body", "date-time", m.ModifiedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Installment) validateRepaymentAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.RepaymentAmount) { // not required
		return nil
	}

	if err := validate.Minimum("repaymentAmount", "body", *m.RepaymentAmount, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Installment) validateRepaymentTime(formats strfmt.Registry) error {
	if swag.IsZero(m.RepaymentTime) { // not required
		return nil
	}

	if err := validate.FormatOf("repaymentTime", "body", "date-time", m.RepaymentTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this installment based on context it is used
func (m *Installment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Installment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Installment) UnmarshalBinary(b []byte) error {
	var res Installment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
